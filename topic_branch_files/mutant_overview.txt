This file contains a list of mutants, a brief description of what they are, 
and how they behave. This was done with forward a-star and h_0. 
They are located in the mutant folder.


a-star_mutant1: Nothing
a-star_mutant2: Initial deepness and initial costs are arbitrarily chosen. 
	Pass
a-star_mutant3: NextNodes = [] is removed, if a dead end is found, predicate fails.
	Fails, 21 fail, 3 pass
a-star_mutant4: ND = D + 2. This just doubles the weight of the non-heuristics. 
	Passes
a-star_mutant5: Skips the no-member checks in next_node. I guess this gets corrected for
	in my_pop, but adds very many extra nodes to the queue that gets popped again.
	Passes 
a-star_mutant6: add_list_heap([_]), does not add last element.
	Fail, 22 failed, 2 passed
a-star_mutant7: Sends Old Visited (V) instead of New Visited (NW) to next_node. 
	Passes since there is no action from a node to itself in the test.
	Passes
a-star_mutant8: Does not do the non-member check in my_pop, similar to the initial file.
	If combined with solution2, it gives an optimal path, but fails due to inefficiency. 
	Fail, 13 fail, 11 pass
a-star_mutant9: Does not pop the next node, only finds it. Passes because it
	does not gets visited later because of the non-member check. 
	Passes
forward_mutant1: Negative effects are overlooked. 
	Fails, 19 Fail, 5 Pass
	
Another bug that was found recently: For non-monotone heuristic, a node may need
to be visited more than once (if it is found again with lower cost) to get an 
optimal solution. Therefore, my_pop was rewritten, and solution2 has to be used. 
This bug was found after the other mutations. This made the running times much slower,
especially for h_add. 

Ideas that fails everything:

Severely changing the cost (E), for example H - D instead of H + D

Not updating the Visited list (loops).

Not checking for preconditions in step.

Not checking the positive effects in step. 